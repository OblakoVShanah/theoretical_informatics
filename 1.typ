= Домашнее задание 1.

= 1.
Постройте машину Тьюринга, вычисляющую функцию $n arrow.r.bar n mod 5$ в унарной кодировке аргументов. Оцените время вычислений на вашей машине в зависимости от n.

== Описание:
Машина будет проходиться по слову-числу, удаляя единицы, и при этом циклично меняя свое состояние среди диапазона  $\{q_1, ..., q_5\}$ .  
После удаления всех единичек, остаток от деления на 5 будет соответствовать номеру состояния, и останется лишь записать номер этого состояния.

== Построение:
- $q_s$, \# $->$ $q_1$, \#, R  \\\\ Старт
- $q_1$, 1 $->$ $q_2$, \#, R \\\\ Проходим по числу, циклично меняя состояния
- $q_2$, 1 $->$ $q_3$, \#, R 
- $q_3$, 1 $->$ $q_4$, \#, R 
- $q_4$, 1 $->$ $q_5$, \#, R 
- $q_5$, 1 $->$ $q_1$, \#, R 
- $q_5$, \# $->$ $q_4$, 1, R \\\\ Дойдя до конца, начинаем записывать остаток, пока не вернемся на состояние $q_1$
- $q_4$, \# $->$ $q_3$, 1, R
- $q_3$, \# $->$ $q_2$, 1, R
- $q_2$, \# $->$ $q_1$, 1, R
- $q_1$, \# $->$ $q_b$, 1, 0 \\\\ $q_b$ -- состояние для возвращения назад после написания остатка
- $q_b$, \1 $->$ $q_b$, 1, L 
- $q_b$, \# $->$ $q_f$, \#, 0 

= 2.
Опишите машину Тьюринга, вычисляющую функцию $n, m arrow.r.bar n * m$ в унарной кодировке аргументов. Аргументы разделяются специальным символом $\$ in Gamma backslash Sigma$. Оцените время вычислений на вашей машине в зависимости от длины входа.

== Описание:
Начальная конфигурация: $1^n\1^m$.
1. Машина заменяет первую единицу в левом числе на \# и переходит в состояние копирования числа m.
2. Машина копирует число m и приписывает результат его справа.
3. Цикл повторяется, пока от левого числа ничего не останется.
4. Последним шагом машина убирает все лишнее.

Сложность: Копирование числа m:  $O(m * (m * n))$ (поскольку записываем скопированное число справа от результата). Всего n таких копирований. Итого $O(m^2 n^2))$.

= 3.
Опишите машину Тьюринга, за время $O(n log n)$:

- a) преобразующую унарную запись числа $n$ в бинарную;
- b) преобразующую бинарную запись числа $n$ в унарную;
- c) вычисляющую функцию $n arrow.r.bar 2n$ в унарной кодировке.

== Описание:

=== a)
1. Головка проходится по унарной записи числа, удаляя каждую вторую встретившуюся единицу — $O(n)$.
2. Головка записывает слева от унарной записи числа 1 или 0 в зависимости от последнего состояния на унарном числе перед встречей с \# (была удалена единица на прошлом шаге или нет). Каждая последующая запись происходит слева от записанного промежуточного результата.

Итого: $log n$ шагов, каждый сложностью $O(n)$, всего $O(n log n)$.

=== Пример:
1111111 $->$ 111

1. $\#\#\#1111111\# -> \#\#\#1010101\# -> \#\#1\#1010101\# $
2. $\#\#1\#1010101\# -> \#\#1\#1001000\# -> \#11\#1001000\# $
3. $\#11\#100100\# -> \#11\#1000000\# -> 111\#1000000\# $

=== b)
1. Вычитается единица из бинарного числа — $O(log n)$.
2. Ставится единица перед бинарным числом — $O(1)$, так как головка уже сдвинулась к началу числа.
3. Бинарная запись числа сдвигается на 1 вправо — $O(log n)$.

Итого: n шагов, каждый сложностью $O(log n)$, всего $O(n log n)$.

=== c)
1. Конвертация в бинарную запись — $O(n log n)$.
2. Удвоение путем приписывания 0 справа в бинарной записи — $O(1)$.
3. Конвертация удвоенного числа в унарную запись — $O(n log n)$.